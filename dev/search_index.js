var documenterSearchIndex = {"docs":
[{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"using Plots\nusing SankeyPlots\n\nfunction plot_results(sp, pv, w, el_d; plot_span = 1:length(pv), s=1, el_balance_vars=[:gci, :gco], storage_vars=[], inv_dict = 0)\n    if inv_dict != 0\n        u_pv = inv_dict[:u_pv]\n        u_wind = inv_dict[:u_wind]\n        u_storage = inv_dict[:u_storage]\n        u_heatpump = inv_dict[:u_heatpump]\n        u_heat_storage = inv_dict[:u_heat_storage]\n    else\n        u_pv = value.(sp[1, :u_pv])\n        u_wind = value.(sp[1, :u_wind])\n        u_storage = value.(sp[1, :u_storage])\n        u_heatpump = value.(sp[1, :u_heatpump])\n        u_heat_storage = value.(sp[1, :u_heat_storage])\n    end\n    plt_sto = plot(; legend = :outertopright)\n    plt_invest = plot(; legend = :outertopright)\n    plt = plot(; legend = :outertopright)\n    plot!(plt_invest, plot_span, pv[plot_span] .* u_pv, label=\"PV\")\n    plot!(plt_invest, plot_span, w[plot_span] .* u_wind, label=\"Wind\")\n    plot!(plt_invest, plot_span, el_d[plot_span], label=\"Electrical demand\")\n    t_xi = scenarios(sp)[s].data.t_xi\n    recovery_time = sp.stages[2].parameters[:recovery_time]\n\n    stor_charge = value.(sp[1, :sto_soc])\n    plot!(plt_sto, plot_span, stor_charge[plot_span], label=\"global storage charge\")\n    plot!(plt_sto, (t_xi):(t_xi+recovery_time-1), value.(sp[2, :sto_soc2],s), label=string(\"stochastic storage charge\")*string(s), linestyle=:dash, linewidth=2)\n\n    for var in el_balance_vars\n        plot!(plt, plot_span, value.(sp[1, var])[plot_span], label=string(var))\n        var2 = Symbol(string(var)*\"2\")\n        plot!(plt, (t_xi+1):(t_xi+recovery_time), value.(sp[2, var2], s), label=string(var)*\" 2nd stage, s = \"*string(s), linestyle=:dash, linewidth=2)\n\n    end\n    return plot(plt_invest, plt, plt_sto, layout = (3,1))\nend\n\nfunction plot_heat_layer(sp, heatdemand; plot_span = 1:length(heatdemand), s = 1, inv_dict = 0)\n    plt_heat = plot(; legend = :outertopright)\n    COP = sp.stages[2].parameters[:COP]\n\n    plot!(plt_heat, plot_span, heatdemand[plot_span], label = \"heat demand\")\n    plot!(plt_heat, plot_span, COP*value.(sp[1, :flow_energy2heat])[plot_span], label = \"heatpump\")\n    plot!(plt_heat, plot_span, value.(sp[1, :heat_sto_soc])[plot_span], label = \"heat storage SOC\")\n    plot!(plt_heat, plot_span, value.(sp[1, :heat_sto_to_bus])[plot_span]-value.(sp[1, :heat_sto_from_bus])[plot_span], label = \"heat storage use\")","category":"page"},{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"plot!(pltheat, (txi+1):(txi+recoverytime), COP*value.(sp[2, :flowenergy2heat2], s), label = \"heatpumps\", linestyle=:dash, linewidth=2) plot!(pltheat, (txi+1):(txi+recoverytime), value.(sp[2, :heatstoin2], s)-value.(sp[2, :heatsto_out2], s), label = \"heat storage use s\", linestyle=:dash, linewidth=2)","category":"page"},{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"end\n\nfunction plot_recovery_window_deviation(sp; s = 1)\n    plt_gc = plot()\n    plt_sto = plot()\n    t_xi = scenarios(sp)[s].data.t_xi\n    recovery_time = sp.stages[2].parameters[:recovery_time]\n    plot!(plt_gc, value.(sp[1, :flow_energy2heat])[t_xi+1:t_xi+recovery_time], label = \"global flow_energy2heat\")\n    plot!(plt_gc, value.(sp[2, :flow_energy2heat2], s), label = \"stochastic flow_energy2heat\")\n    plot!(plt_gc, -value.(sp[1, :gci])[t_xi+1:t_xi+recovery_time]+value.(sp[2, :gci2], s), label = \"global grid connection use\")\n    plot!(plt_gc, value.(sp[2, :gco2], s) - value.(sp[1, :gco])[t_xi+1:t_xi+recovery_time], xlabel = \"time after the event, h\", label = \"stochastic grid connection use\")\n    #plot!(plt_gc, -value.(sp[1, :gco])[t_xi+1:t_xi+recovery_time]+value.(sp[2, :gco2], s), xlabel = \"time after the event, h\", label = \"gco2-gco\")\n\n    stor_charge = value.(sp[1, :sto_soc])[t_xi+1:t_xi+recovery_time]\n    stor_charge2 = value.(sp[2, :sto_soc2], s)\n\n    plot!(plt_sto, stor_charge2-stor_charge, label = \"soc2-soc\")\n\n\n    plot(plt_gc, plt_sto, layout = (2, 1))\nend\n\nfunction plot_outcome(sp_base, t_xi, s_xi, F_xi; window_start=-2, window_end=2)\n    scen = @scenario t_xi = t_xi s_xi = s_xi F_xi = F_xi probability = 1.\n    sp = outcome_model(sp_base, optimal_decision(sp_base), scen; optimizer = subproblem_optimizer(sp_base))\n    optimize!(sp)\n    if termination_status(sp) != JuMP.MathOptInterface.OPTIMAL\n        println(\"No optimum\")\n        return termination_status(sp)\n    end\n\n    recovery_window = t_xi:t_xi+length(sp[:gco2])-1\n    plot_window = t_xi+1+window_start:t_xi+length(sp[:gco2])+window_end","category":"page"},{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"Some of these should probably be shifted by Â±1","category":"page"},{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"    plt_gb = plot(title=\"grid buy\", legend=:outertopright)\n    plot!(plt_gb, plot_window, value.(sp[:gci][plot_window]) .- value.(sp[:gco][plot_window]), label = \"Base Case\")\n    plot!(plt_gb, recovery_window, value.(sp[:gci2]) .- value.(sp[:gco2]), label = \"Event\")\n\n    plt_soc = plot(title=\"soc\", legend=:outertopright)\n    plot!(plt_soc, plot_window, value.(sp[:sto_soc][plot_window]), label = \"Base Case\")\n    plot!(plt_soc, recovery_window, value.(sp[:sto_soc2]), label = \"Event\")\n\n    plt_h_soc = plot(title=\"heat soc\", legend=:outertopright)\n    plot!(plt_h_soc, plot_window, value.(sp[:heat_sto_soc][plot_window]), label = \"Base Case\")\n    plot!(plt_h_soc, recovery_window, value.(sp[:heat_sto_soc2]), label = \"Event\")\n\n    plt_e2h = plot(title=\"e2h\", legend=:outertopright)\n    plot!(plt_e2h, plot_window, value.(sp[:flow_energy2heat][plot_window]), label = \"Base Case\")\n    plot!(plt_e2h, recovery_window, value.(sp[:flow_energy2heat2]), label = \"Event\")\n\n    plot(plt_gb, plt_h_soc, plt_soc, plt_e2h, layout=(4,1))\nend\n\nfunction sankey_results(sp, pv, w, el_d, timesteps)\n    total_pv = value.(sp[1, :u_pv])*sum(pv[timesteps])\n    total_wind = value.(sp[1, :u_wind])*sum(w[timesteps])\n    total_demand = sum(el_d[timesteps])\n    st_in = sum(value.(sp[1,:sto_to_bus])[timesteps])\n    st_out = sum(value.(sp[1,:sto_from_bus])[timesteps])\n    grid_in = sum(value.(sp[1,:gci])[timesteps])\n    grid_out = sum(value.(sp[1,:gco])[timesteps])\n    storage_losses = sp.stages[1].parameters[:storage_losses].*sum(value.(sp[1,:sto_soc])[timesteps])\n    labels = [\"PV\", \"Wind\", \"Storage (input)\", \"Storage (output)\", \"Demand\", \"Grid input\", \"Grid output\", \"Bus\", \"Losses\"]\n    src = [1,2,4,6,8,8,8,8]\n    trg = [8,8,8,8,3,5,7,9]\n    weights = [total_pv, total_wind, st_in, grid_in, st_out, total_demand, grid_out, storage_losses]\n    total_in = total_pv+total_wind+st_in+grid_in\n    total_out = total_demand+st_out+grid_out\n    print(total_in-total_out)\n    sankey(src, trg, weights, node_labels = labels)\n\nend","category":"page"},{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"","category":"page"},{"location":"generated/srcs/plot_utils/","page":"Plotting","title":"Plotting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/srcs/evaluation_utils/","page":"Evaluation","title":"Evaluation","text":"using Plots\n\n\"\"\"\nSuppress output of evaluate_decision, and deal with solvers that error on infeasibility.\n\"\"\"\nfunction evaluate_decision_wrapper(p, decision, scenario)\n    cost = 0.\n    try redirect_stdout((() -> cost = evaluate_decision(p, decision, scenario)), devnull)\n    catch e\n        cost = Inf\n    end\n    return cost\nend\n\n\"\"\"\nFind maximum available flexibility and its cost at all points in some time interval.\n\"\"\"\nfunction analyze_flexibility_potential(sp, timesteps; decision = optimal_decision(sp))\n    cost_no_flex = evaluate_decision_wrapper(sp, optimal_decision(sp), no_flex_pseudo_sampler()[1])\n    L = length(timesteps)\n    cost_pos_flex = zeros(L)\n    cost_neg_flex = zeros(L)\n    potential_pos_flex = zeros(L)\n    potential_neg_flex = zeros(L)\n    Threads.@threads for i in 1:length(timesteps)\n        t = timesteps[i]\n        potential_pos_flex[i], cost_pos_flex[i] = find_f_max(sp,t,1,decision)\n        potential_neg_flex[i], cost_neg_flex[i] = find_f_max(sp,t,-1,decision)\n    end\n    return cost_pos_flex .- cost_no_flex, potential_pos_flex, cost_neg_flex .- cost_no_flex, potential_neg_flex\nend\n\nfunction plot_flexibility(timesteps, cost_pos_flex, potential_pos_flex, cost_neg_flex, potential_neg_flex)\n    plt_cost = plot()\n    plt_pot = plot()\n    plot!(plt_cost, timesteps, cost_pos_flex ./ potential_pos_flex, label = \"price of positive flexibility\")\n    plot!(plt_cost, timesteps, cost_neg_flex ./ abs.(potential_neg_flex), label = \"price of negative flexibility\")\n    plot!(plt_pot, timesteps, potential_pos_flex, fillrange = 0, fillalpha = 0.35, label = \"positive flexibility potential\")\n    plot!(plt_pot, timesteps, potential_neg_flex, fillrange = 0, fillalpha = 0.35, label = \"negative flexibility potential\")\n    plot(plt_cost, plt_pot, layout = (2, 1))\nend\n\n\"\"\"\nFind distribution of maximum available flexibilities.\n\"\"\"\nfunction flexibility_availability!(plt, flex_potential; plot_options...)\n    p_sorted = sort(unique(flex_potential))\n    fraction = [sum(abs.(flex_potential[:]).>=abs(f)) for f in p_sorted]./length(p_sorted)\n    plot!(plt, p_sorted, fraction)\nend\n\n\"\"\"\nBisection search for maximum felxibility potential.\nParameters:\n- sp - optimized stochastic program\n- t - time step\n- s - sign of flexibility scenario\n- tol - result tolerance\n- maxiters - maximum number of iterations\n\"\"\"\nfunction find_f_max(sp, t, s, od; tol = 10., maxiter = 100)\n    a = 0.\n    b = 10000.\n    cost_a = 0.\n    cost_b = 0.\n    i = 0\n    scen = @scenario t_xi = t s_xi = s F_xi = a probability = 1.\n    cost_a = evaluate_decision_wrapper(sp,od,scen)\n    if cost_a == Inf\n        return 0., cost_a\n    else\n        while b-a>tol && i<=maxiter\n            i+=1\n            scen = @scenario t_xi = t s_xi = s F_xi = b probability = 1.\n            cost_b = evaluate_decision_wrapper(sp,od,scen)\n            if cost_b == Inf\n                b = (a+b)/2\n            else\n                a = b\n                cost_a = cost_b\n                b *= 2\n            end\n        end\n        return s*a, cost_a\n    end\nend","category":"page"},{"location":"generated/srcs/evaluation_utils/","page":"Evaluation","title":"Evaluation","text":"","category":"page"},{"location":"generated/srcs/evaluation_utils/","page":"Evaluation","title":"Evaluation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stochastic-Flexibility-Optimization","page":"Flexibility analysis using Stochastic Programing","title":"Stochastic Flexibility Optimization","text":"","category":"section"},{"location":"","page":"Flexibility analysis using Stochastic Programing","title":"Flexibility analysis using Stochastic Programing","text":"Companion repo for paper.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"EditURL = \"https://github.com/PIK-ICoNe/StochasticFlexibility/blob/main/manuscripts/flexibility_by_stochastic_programing.jl\"","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"# Everything runs in the Project environment on the basepath\n\nbasepath = realpath(joinpath(\"/home/runner/work/StochasticFlexibility/StochasticFlexibility/manuscripts\", \"..\"))\n\nusing Pkg\nPkg.activate(basepath)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Pkg.instantiate()","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"using DataFrames\nusing CSV\nusing Clp\nusing Statistics;\n\nusing Random\nRandom.seed!(1);\nnothing #hide","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/#Flexibility-analysis-and-optimization","page":"Main Story","title":"Flexibility analysis and optimization","text":"","category":"section"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We take an energy system and analyze and optimize its flexibility potential.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"The model is defined in the file sp_model.jl, analysis and utility functions are in the other two files.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"The parametrization is not completely done yet, and running the analysis for a whole year is very time intensive. The main optimization runs fine for a whole year, but analyzing the flexibility potential for many hours is computationally intense.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We need to either start caching more computations, or find a way to speed up the evaluation further.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This file gives a conceptual demonstration of what we do on a two week horizon.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"include(joinpath(basepath, \"src\", \"sp_model.jl\"))\ninclude(joinpath(basepath, \"src\", \"plot_utils.jl\"))\ninclude(joinpath(basepath, \"src\", \"evaluation_utils.jl\"));\nnothing #hide","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We load timeseries for photovoltaic (pv) and wind potential as well as demand.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"offset = 24*7*14\ntimesteps = 1:(24*7*2)\n\ndata = CSV.read(joinpath(basepath, \"timeseries\", \"basic_example.csv\"), DataFrame)\nheatdemand_data = CSV.read(joinpath(basepath, \"timeseries\", \"heatdemand.csv\"), DataFrame)\n\npv = data[timesteps .+ offset, 3]\nwind = data[timesteps .+ offset, 4]\ndemand = data[timesteps .+ offset, 2]\nheatdemand = heatdemand_data[timesteps .+ offset, 1]\n\ndata = nothing; # Free the memory\nheatdemand_data = nothing;\n\nplt = plot(timesteps, pv .* (mean(demand) / mean(pv)), label=\"PV (unitless)\")\nplot!(plt, timesteps, wind.* (mean(demand) / mean(wind)), label=\"Wind (unitless)\")\nplot!(plt, timesteps, heatdemand, label=\"Heat Demand\")\nplot!(plt, timesteps, demand, label=\"Electric Demand\")\nplt","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Next we continue the set up. Our model comes with default parameters, which we slightly adjust here. We use some arbitrary values to define a dummy heat demand.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"pars = copy(default_es_pars)\n\naverage_hourly_demand = mean(demand)\n\npars[:recovery_time] = 24\npars[:c_storage] = 100.\npars[:c_pv] = 300.\npars[:c_wind] = 450.\npars[:c_sto_op] = 0.00001;\nnothing #hide","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"The model itself is constructed by the function defineenergysystem","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"es = define_energy_system(pv, wind, demand, heatdemand; p = pars, strict_flex = true)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This contains investment variables which we collectively call I, and the operational schedule O^t. The total cost given a certain investment I and schedule O^t is denoted C(I O^t).","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We now can optimize the system, initialy while ignoring flexibility:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"sp_no_flex = instantiate(es, no_flex_pseudo_sampler(), optimizer = Clp.Optimizer)\nset_silent(sp_no_flex)\n\noptimize!(sp_no_flex)\n\nno_flex_decision = optimal_decision(sp_no_flex)\n\nobjective_value(sp_no_flex)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"overline I_nf  overline O^t_nf = argmin_I O^t C(I O^t)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We can now analyse how much flexibility is available at each point in time with this investment and this schedule.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"To do so we distinguish between parts of the operational schedule that can react to a flexibility demand in the moment that it occurs, and those that can only adapt later to help recover the system back towards its previously planned schedule. Essentially into slow components O^st and fast components O^ft","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"O^t = (O^ft O^st)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We then consider the cost of the system when confronted with an additional negative or positive demand F at some timepoint t^F. At the timepoint t^F only the fast reacting components can adjust their schedule, the slow components still have to stick to the previous schedule. After the event we give the system a time t_r to recover back to its original schedule. Here the slow components can contribute. Thus we have:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"beginaligned\nc(Ft^F) = min_O^t C(overline I_nf O^t F t_f)  \nO^st = overline O^t_nf  forall  t leq t^F   t  t^F + t_r \nO^ft = overline O^t_nf  forall   t  t^F   t  t^F + t_r\nendaligned","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This is the cost of flexibility in the sense of Harder et.al. This optimization is not always feasible. The maximum and minimum F for which it is feasible is called the positive and negative flexibility potential pot_pm. The marginal cost of flexibility is cost_pm(t) = c(pot_pm(t) t)  pot_pm(t). Using our model above we can analyze this in the following way:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"analysis_window = 190+1:190+48\n\ncost_pos, pot_pos, cost_neg, pot_neg = analyze_flexibility_potential(sp_no_flex, analysis_window)\n\nplot_flexibility(analysis_window, cost_pos, pot_pos, cost_neg, pot_neg)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"plot_results(sp_no_flex, pv, wind, demand)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"plot_heat_layer(sp_no_flex, heatdemand)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"prob_scen = @scenario t_xi = 195 s_xi = 1. F_xi = 0. probability = 1.\nevaluate_decision(sp_no_flex, no_flex_decision, prob_scen)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"outcome = outcome_model(sp_no_flex, no_flex_decision, prob_scen; optimizer = subproblem_optimizer(sp_no_flex))\noptimize!(outcome)\ntermination_status(outcome)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Under the hood this uses the evaluate_decision function of stochastic programs that evaluates the cost of a specified scenario given a decision.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We can go further if we introduce a certain distribution of flexibility demands. Then we can choose to operate the system in such a way that the expected cost, including the expected cost of flexibility, is minimized. This is exactly a two stage stochastic programming problem with c(Ft) as the second stage.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We can start by taking a simple uniform distribution between some maximum flexibility demand that can occur at any time that leaves enough space for the recovery window:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"n = 100\nF_max = average_hourly_demand * 0.1 # Have unaticipated demand equal to 10% of our typical demand\nt_max = length(pv) - es.parameters[2].defaults[:recovery_time]\n\nscens = simple_flex_sampler(n, F_max, t_max);\nnothing #hide","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We can now evaluate the expected cost of running the system determined above with this flexibility distribution.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"sp_flex = instantiate(es, scens, optimizer = Clp.Optimizer)\nset_silent(sp_flex)\n\nevaluate_decision(sp_flex, no_flex_decision)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This is infinite as the system as built above can not actually provide the desired flexibility at all times. One way to deal with this problem is to regularize the problem, by allowing a heavily penalized deviation from satisfying the extra demand.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"es_reg = define_energy_system(pv, wind, demand, heatdemand; p = pars, strict_flex = false)\n\nsp_reg_flex = instantiate(es_reg, scens, optimizer = Clp.Optimizer)\nset_silent(sp_reg_flex)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Now we can evaluate the expected cost of flexibility in the system:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"evaluate_decision(sp_reg_flex, no_flex_decision)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"TODO / BUG: This is infinite for some time windows/seeds! This should not happen.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This cost is of course completely dominated by the regularizer. However, using stochastic programming we can optimize the operational schedule to directly optimize this expected cost. To do so we fix the investment to the system we have and then optimize the remaining variables:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"investments_nf = get_investments(sp_no_flex)\nfix_investment!(sp_flex, investments_nf)\nfix_investment!(sp_reg_flex, investments_nf)\n\noptimize!(sp_flex)\noptimize!(sp_reg_flex)\n\nflex_no_invest_decision = optimal_decision(sp_flex)\nreg_flex_no_invest_decision = optimal_decision(sp_reg_flex);\nnothing #hide","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Then evaluating the decision we find much more reasonable values:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"evaluate_decision(sp_reg_flex, flex_no_invest_decision)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"evaluate_decision(sp_reg_flex, reg_flex_no_invest_decision)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"relative_flex_cost = evaluate_decision(sp_reg_flex, flex_no_invest_decision) / objective_value(sp_no_flex) - 1.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"It is interesting to note that this way servicing the flexibility is actually not very expensive compared to the baseline cost of the system if there were no flexibility demands, with the relative cost of flexibility coming in at 0.2% here.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We can also again evaluate the amount of flexibility available at each point in time, and the associated cost:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"To find flexibility potentials we right now have to use the unregularized model:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"cost_pos_flex, pot_pos_flex, cost_neg_flex, pot_neg_flex = analyze_flexibility_potential(sp_flex, analysis_window)\n\nplot_flexibility(analysis_window, cost_pos_flex, pot_pos_flex, cost_neg_flex, pot_neg_flex)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This shows that the model is not actually able to guarantee that there is flexibility at all times. However, it dramatically increases the amount of available flexibility:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"plt_av = plot();\nflexibility_availability!(plt_av, pot_pos, label = \"positive flexbility unaware\", c = :red);\nflexibility_availability!(plt_av, pot_pos_flex, label = \"positive flexibility aware\", c = :green);\nflexibility_availability!(plt_av, pot_neg, label = \"negative flexibility unaware\", c = :red);\nflexibility_availability!(plt_av, pot_neg_flex, label = \"negative flexibility aware\", c = :green);\nplt_av","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"We can of course also optimize the overall system investment to take flexibility into account.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"unfix_investment!(sp_flex, investments_nf)\nunfix_investment!(sp_reg_flex, investments_nf)\n\noptimize!(sp_flex)\noptimize!(sp_reg_flex)\n\nflex_invest_decision = optimal_decision(sp_flex)\nreg_flex_invest_decision = optimal_decision(sp_reg_flex);\nnothing #hide","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Then the relative cost of the system exposed to flexibility is further reduced:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"evaluate_decision(sp_reg_flex, flex_invest_decision)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"evaluate_decision(sp_reg_flex, reg_flex_invest_decision)","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"relative_flex_cost_inv = evaluate_decision(sp_reg_flex, flex_invest_decision) / objective_value(sp_no_flex) - 1.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Considering the flexiblity demands at investment time, rather than only during operations lowers the cost of flexibility by:","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"relative_flex_cost_inv / relative_flex_cost - 1.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"27% for this toy model.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/#Further-thoughts","page":"Main Story","title":"Further thoughts","text":"","category":"section"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"There are numerous directions to go from here.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This document focused on (a regularized version of) the expected price of flexibility. Another possibility would be to make a minimum amount of available flexibility a constraint. There are algorithms taht concern stochastic constraints that might be useful to explore then.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"A general question with all of this is: We are sampling the space of possible events. The operational schedule we obtain will probably contain moments at which there is no flexibility. The sample might miss the few hours at which flexibility is hardest to come by.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"It is unclear (and requires further analysis) how much of a problem that is. E.g. maybe the flex aware schedule based on a sample will not have flexibility at some hours, but a very minor adjustment would. In partiuclar I consider it plausible that the investment decisions are not strongly affected by these gaps, as long as sufficiently many representative scenarios are sampled.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"In evaluating the quality of the sampling approach it might also be appropriate to evaluate the assumption of a schedule based on perfect foresight for everything but the felxiblity. A proper validation set up would also consider the weather and demand uncertainties.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"A general choice we have is whether to think of the flexibility as for the system itself, or for selling as an auxilliary service. In the former case we can think of the regularizer as buying flexibility on the open market once providing it ourselfs becomes to expensive. For the latter we would need to think about potential products that can reasonably be offered/modelled in the stochastic program. E.g. we can not simply say we are offering the full flexibility potential as that is a quantity that is hard to evaluate.","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"Given multiple energy systems that trade with each other we could try to analyze a market of such systems as well","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"","category":"page"},{"location":"generated/flexibility_by_stochastic_programing/","page":"Main Story","title":"Main Story","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"using StochasticPrograms\nusing Random\n\n#\n\"\"\"\nDefault values of system parameters.\n- c_i - price of buying energy from the grid, Euro/kW\n- c_o - price of selling energy to the grid, Euro/kW\n- asset_lifetime - expected lifetime of a component in years. Needed to bring investment and operational costs to the same timescale\n- c_pv, c_wind - price of installing pv and wind components per kW peak, Euro/kWp\n- c_storage - price of storage, Euro/kW\n- c_heat_storage - TODO: heat layer units\n- c_heatpump\n- inv_budget - maximum investment budget, Euro\n- recovery_time - time after the event, in which the system is allowed to deviate from background optimal schedule, h\n- COP - heatpump efficiency coefficient\n- heat_losses - losses in the heat storage\n- penalty - price of non-delivery of flexibility, Euro\n\"\"\"\ndefault_es_pars = Dict((\n    :c_i => .3,\n    :c_o => .05,\n    :asset_lifetime => 10.,\n    :c_pv => 700.,\n    :c_wind => 2000.,\n    :c_storage => 600.,\n    :c_heat_storage => 30.,\n    :c_heatpump => 20.,\n    :inv_budget => 500000000.,\n    :recovery_time => 72,\n    :COP => 3.5,\n    :heat_losses => 0.2,\n    :sto_ef_ch => 0.95,\n    :sto_ef_dis => 0.95,\n    :storage_losses => 0.03,\n    :penalty => 10000.,\n    :feedincap => 1000000.,\n    :scens_in_year => 1.\n))\n\n\"\"\"\nDraw a sample of n scenarios\n\"\"\"\nfunction simple_flex_sampler(n, F_max, t_max)\n    [@scenario t_xi = rand(1:t_max) s_xi = rand([-1, 1]) F_xi = rand() * F_max probability = 1/n\n        for i in 1:n]\nend\n\n\"\"\"\nGet an array with a single pseudo scenario with no flexiblity.\nThis is useful for optimizing the system as if no flexibilty was introduced.\n\"\"\"\nfunction no_flex_pseudo_sampler()\n    [@scenario t_xi = 1 s_xi = 1 F_xi = 0. probability = 1.\n    ,]\nend\n\n\"\"\"\nDraw a sample of n scenarios which have different probaility at day and night\n\"\"\"\n\nfunction timedependent_flex_sampler(n, F_max, t_day, t_night, prob_day, prob_night)\n    sday = [@scenario t_xi = rand(t_day) s_xi = rand([-1, 1]) F_xi = rand() * F_max probability = prob_day/n\n        for i in 1:(n/2)]\n    snight = [@scenario t_xi = rand(t_night) s_xi = rand([-1, 1]) F_xi = rand() * F_max probability = prob_night/n\n        for i in 1:(n/2)]\n    return vcat(sday,snight)\nend\n\n\nfunction gap_sampler(indices)\n    [@scenario t_xi = 1 s_xi = 1 F_xi = 0. probability = 1.\n     for i in indices]\nend\n\n\"\"\"\nDefine energy system.\nParameters:\n- pv, wind - weather timeseries\n- demand, heatdemand - demand timeseries\n- p - dictionary with system parameters, such as component costs, losses and recovery time window\n- strict_flex - bool, if false, finite penalty is used\n\"\"\"\nfunction define_energy_system(pv, wind, demand, heatdemand; p = default_es_pars, strict_flex=false)\n    number_of_hours = minimum([length(pv), length(demand), length(wind)])\n    c_i = p[:c_i]\n    c_o = p[:c_o]\n    recovery_time = p[:recovery_time]\n    COP = p[:COP]\n    heat_losses = p[:heat_losses]\n    storage_losses = p[:storage_losses]\n    energy_system = @stochastic_model begin\n        @stage 1 begin\n            @parameters begin","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Expected lifetime of components, years","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"                asset_lifetime = p[:asset_lifetime]","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Costs in Euro/1kWp","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"                c_pv = p[:c_pv]\n                c_wind = p[:c_wind]\n                c_storage = p[:c_storage]\n                c_i = c_i\n                c_o = c_o\n                c_heat_storage = p[:c_heat_storage]\n                c_heatpump = p[:c_heatpump]\n                COP = COP\n                heat_losses = heat_losses\n                storage_losses = storage_losses\n                feedincap = p[:feedincap]","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Euro","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"                inv_budget = p[:inv_budget] # Make the problem bounded\n            end\n            lifetime_factor = asset_lifetime * 365 * 24 / number_of_hours","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Component units to be invested in, kWp","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @decision(model, u_pv >= 0)\n            @decision(model, u_wind >= 0)\n            @decision(model, u_storage >= 0)\n            @constraint(model, c_pv * u_pv + c_wind * u_wind + c_storage * u_storage <= inv_budget)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Grid connection","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @decision(model, gci[t in 1:number_of_hours] >= 0)\n            @decision(model, gco[t in 1:number_of_hours] >= 0)\n            @constraint(model, sum(gco) <= feedincap)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Storage model","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @decision(model, sto_to_bus[t in 1:number_of_hours] >= 0) # into the bus from storage\n            @decision(model, sto_from_bus[t in 1:number_of_hours] >= 0)\n            @decision(model, sto_soc[t in 1:number_of_hours] >= 0)\n            @constraint(model, [t in 1:number_of_hours-1], sto_soc[t+1] == sto_soc[t] + sto_from_bus[t] - sto_to_bus[t])\n            @constraint(model, [t in 1:number_of_hours], sto_soc[t] <= u_storage)\n            @constraint(model, sto_soc[1] == u_storage / 2)\n            @constraint(model, sto_soc[number_of_hours] + sto_from_bus[number_of_hours] - sto_to_bus[number_of_hours] == sto_soc[1])","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Heat model","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @decision(model, u_heatpump >= 0)\n            @decision(model, u_heat_storage >= 0)\n            @decision(model, heat_sto_to_bus[t in 1:number_of_hours] >= 0) # to the heat storage\n            @decision(model, heat_sto_from_bus[t in 1:number_of_hours] >= 0)\n            @decision(model, heat_sto_soc[t in 1:number_of_hours] >= 0)\n            @decision(model, flow_energy2heat[t in 1:number_of_hours] >= 0)\n            if maximum(heatdemand) > 0.\n                #@constraint(model, [t in 1:number_of_hours], flow_energy2heat .<= maximum(heatdemand))\n                @constraint(model, [t in 1:number_of_hours-1], heat_sto_soc[t+1] == heat_sto_soc[t] + heat_sto_from_bus[t] - heat_sto_to_bus[t])\n                @constraint(model, [t in 1:number_of_hours], heat_sto_soc[t] <= u_heat_storage)\n                @constraint(model, heat_sto_soc[1] == u_heat_storage / 2)\n                @constraint(model, heat_sto_soc[number_of_hours] + heat_sto_from_bus[number_of_hours] - heat_sto_to_bus[number_of_hours] == heat_sto_soc[1])\n                @constraint(model, [t in 1:number_of_hours], flow_energy2heat[t] <= 1/COP*u_heatpump)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Heat balance","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"                @constraint(model, [t in 1:number_of_hours], -heatdemand[t] + heat_sto_to_bus[t] - heat_sto_from_bus[t] + COP*flow_energy2heat[t] - heat_losses*heat_sto_soc[t] == 0)\n            else\n                @constraint(model, u_heat_storage == 0.)\n                @constraint(model, u_heatpump == 0.)\n                @constraint(model, [t in 1:number_of_hours], flow_energy2heat[t] == 0.)\n            end","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Energy balance","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @constraint(model, [t in 1:number_of_hours],\n            gci[t] - gco[t] + u_pv * pv[t] + u_wind * wind[t] - demand[t] + sto_to_bus[t] - sto_from_bus[t] - flow_energy2heat[t] - storage_losses*sto_soc[t] == 0)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Investment costs ... ... and background operational schedule","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @objective(model, Min, (u_pv * c_pv + u_wind * c_wind + u_storage * c_storage\n            + u_heat_storage * c_heat_storage + u_heatpump * c_heatpump) / lifetime_factor\n            + c_i * sum(gci) - c_o * sum(gco))\n        end\n        @stage 2 begin\n            @parameters begin\n                recovery_time = recovery_time\n                c_i = c_i\n                c_o = c_o\n                penalty = p[:penalty]\n                heat_losses = heat_losses\n                COP = COP\n                storage_losses = storage_losses\n            end\n            @uncertain t_xi s_xi F_xi # t_xi the time of flexibility demand, s_xi - sign (Â±1 or 0)\n            t_xi_final = t_xi + recovery_time - 1\n            @known(model, u_pv)\n            @known(model, u_wind)\n            @known(model, u_storage)\n            @known(model, gci)\n            @known(model, gco)\n            @known(model, sto_to_bus)\n            @known(model, sto_from_bus)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Post event components Grid connection","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @recourse(model, gci2[t in 1:recovery_time] >= 0)\n            @recourse(model, gco2[t in 1:recovery_time] >= 0)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Storage model","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @recourse(model, sto_to_bus2[t in 1:recovery_time] >= 0) # into the bus from storage\n            @recourse(model, sto_from_bus2[t in 1:recovery_time] >= 0)\n            @recourse(model, sto_soc2[t in 1:recovery_time] >= 0)\n            @constraint(model, [t in 1:recovery_time-1], sto_soc2[t+1] == sto_soc2[t] + sto_from_bus2[t] - sto_to_bus2[t])\n            @constraint(model, [t in 1:recovery_time], sto_soc2[t] <= u_storage)\n            @constraint(model, sto_soc2[1] == sto_soc[t_xi])\n            @constraint(model, sto_soc2[recovery_time] + sto_from_bus2[recovery_time] - sto_to_bus2[recovery_time] == sto_soc[t_xi+recovery_time])","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Heat model","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @recourse(model, heat_sto_to_bus2[t in 1:recovery_time] >= 0) # from the heat storage\n            @recourse(model, heat_sto_from_bus2[t in 1:recovery_time] >= 0)\n            @recourse(model, heat_sto_soc2[t in 1:recovery_time] >= 0)\n            @recourse(model, flow_energy2heat2[t in 1:recovery_time] >= 0)\n            if maximum(heatdemand) > 0.\n                @constraint(model, [t in 1:recovery_time], flow_energy2heat2 .<= maximum(heatdemand))\n                @constraint(model, [t in 1:recovery_time-1], heat_sto_soc2[t+1] == heat_sto_soc2[t] + heat_sto_from_bus2[t] - heat_sto_to_bus2[t])\n                @constraint(model, [t in 1:recovery_time], heat_sto_soc2[t] <= u_heat_storage)\n                @constraint(model, heat_sto_soc2[1] == heat_sto_soc[t_xi])\n                @constraint(model, heat_sto_soc2[recovery_time] + heat_sto_from_bus2[recovery_time] - heat_sto_to_bus2[recovery_time] == heat_sto_soc[t_xi+recovery_time])\n                @constraint(model, [t in 1:recovery_time], flow_energy2heat2[t] <= 1/COP*u_heatpump)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Heat balance","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"                @constraint(model, [t in 1:recovery_time], -heatdemand[t + t_xi - 1] + heat_sto_to_bus2[t] - heat_sto_from_bus2[t] + COP*flow_energy2heat2[t] - heat_losses*heat_sto_soc2[t] == 0)\n            else\n                @constraint(model, [t in 1:recovery_time], flow_energy2heat2[t] == 0.)\n            end","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Event energy balance The storage and other fast acting components use the recourse variables here. They provide the balance. Grid connection is not allowed, as we are suporting the grid here.","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @constraint(model, gci2[1] - gco2[1] + u_pv * pv[t_xi] + u_wind * wind[t_xi]\n             - demand[t_xi] + sto_to_bus2[1] - sto_from_bus2[1] - storage_losses*sto_soc2[1]\n             - flow_energy2heat2[1] - F_xi * s_xi == 0) # TODO CHeck that our sign convention on positive and negative flexibility agrees with literature\n            if strict_flex\n                @constraint(model, gci2[1] == gci[t_xi])\n                @constraint(model, gco2[1] == gco[t_xi])\n            end\n            # Utility variables to linearize min|gci[t_xi]-gci2[1]|\n            @recourse(model, gi1>=0)\n            @recourse(model, gi2>=0)\n            @constraint(model, gci2[1]-gci[t_xi] == gi1-gi2)\n            @recourse(model, go1>=0)\n            @recourse(model, go2>=0)\n            @constraint(model, gco2[1]-gco[t_xi] == go1-go2)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"Post event energy balance","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @constraint(model, [t in 2:recovery_time],\n            gci2[t] - gco2[t]\n            + u_pv * pv[t + t_xi - 1] + u_wind * wind[t + t_xi - 1]\n            - demand[t + t_xi - 1] + sto_to_bus2[t] - sto_from_bus2[t] - flow_energy2heat2[t] - storage_losses * sto_soc2[t] == 0)","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"The objective function is the difference between the adjusted schedule and the final schedule plus the penalty. TODO: We only evaluate the cost of individual events, so we should multiply the expectation value with the expected number of events, e.g. one per week. I tried to implement this by scaling the objective function here, but that made the problem unbounded.","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"            @objective(model, Min,\n              c_i * (sum(gci2) - sum(gci[t_xi:t_xi_final]))\n            - c_o * (sum(gco2) - sum(gco[t_xi:t_xi_final]))\n            + penalty * (gi1 + gi2) + penalty * (go1 + go2))\n        end\n    end\n    energy_system\nend\n\n\"\"\"\nGet decision variables associated with investment rather than system operation.\n\"\"\"\nget_investments(sp) = Dict((\n    :u_pv => value.(sp[1, :u_pv]),\n    :u_wind => value.(sp[1, :u_wind]),\n    :u_storage => value.(sp[1, :u_storage]),\n    :u_heatpump => value.(sp[1, :u_heatpump]),\n    :u_heat_storage => value.(sp[1, :u_heat_storage])\n))\n\n\"\"\"\nFix the investment variables.\n\"\"\"\nfunction fix_investment!(sp, investments)\n    for (var_sym, value) in zip(keys(investments), values(investments))\n        fix(decision_by_name(sp, 1, string(var_sym)), value)\n    end\nend\n\nfunction unfix_investment!(sp, investments)\n    for var_sym in keys(investments)\n        unfix(decision_by_name(sp, 1, string(var_sym)))\n    end\nend","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"","category":"page"},{"location":"generated/srcs/sp_model/","page":"Model","title":"Model","text":"This page was generated using Literate.jl.","category":"page"}]
}
